
《WEB安全深度剖析》
----------------------------------------------------------------------------------------------------------------
HTTP协议

Http请求：
POST /login.php HTTP/1.1   //请求行（请求方法 域名根目录下的资源 协议版本）
HOST:www.xxser.com         //请求头（请求主机地址 浏览器标识）
User-Agent:Mozilla/5.0(Windows NT 6.1；rv:15.0) Gecko/20100101 Firefox/15.0
						   //空白行，代表请求头结束
Username=admin&password=admin  //请求正文

Http响应：
HTTP/1.1 200 OK   //响应行
Connection:keep-alive    //响应头
Content-Type:text/html; charset=utf-8
Date:Tue, 19 Dec 2017 06:32:57 GMT
Transfer-Encoding:chunked
X-Powered-By:thinkjs-2.2.19
                         //空白行，代表响应头结束
<html>                    //响应正文
   ....			


curl进行http请求
1.curl http://www.baidu.com
2.windows下处理乱码 
curl www.baidu.com | iconv -f utf-8 -t gbk 
  
telnet模拟HTTP请求
1.telnet www.baidu.com 80
2."ctrl ]"打开telnet回显
3.回车,进入编辑
4.输入 
GET /index.html HTTP/1.1
HOST: www.baidu.com   
5.回车

----------------------------------------------------------------------------------------------------------------
工具使用

BurpSuit-proxy使用
1.proxy（浏览器和服务器的中间层）（拦截查看数据包）
配置网络代理:
proxy->options->proxy listeners->bind
配置浏览器的代理：配127.0.0.1 上面输入端口
2.在intercept里查看

forward-跳到下一步 drop-放弃本次请求 intercept is on拦截开关 action 动作

结论：js验证是为了防止用户输入错误，服务器验证是为了防止恶意攻击

Fiddler使用
1.配置fiddler监听tools->options->connections
2.配置是否可以拦截https  tooles->options->勾选capture https connects 和 decrypt https traffic
3.点击某次请求 - inspectors看相应的request和response
4.过滤器filters：某些请求不进行拦截
5.编码器 textwizard
6.断点 rules->automatic breakpoint
7.会话 compose

----------------------------------------------------------------------------------------------------------------
信息探测
Google Hack-搜集web信息（百度原理类似）
site+域名      指定域名
intext+关键字  正文中存在关键字
intitle+关键字  标题中存在关键字
info
inurl
filetype 搜索指定文件

Nmap体验--扫描网络连接端口和服务
1.扫描指定IP所开放的端口
2.扫描存活主机
3.指定端口扫描
4.探测主机系统
5.全面的系统探测
6.穿透防火墙进行扫描
7.利用脚本引擎进行各种扫描（web敏感目录、sql注入等）

DirBuster--探测Web目录结构和隐藏的敏感文件

漏洞扫描--如SQL注入漏洞、跨站点脚本攻击、缓冲区溢出
BurpSuit-target 显示站点地图
1.目标添加到scope
2.使用过滤器filter-show only in-scope items

BurpSuit-spider （爬虫）枚举应用程序的内容和功能

BurpSuit-Scanner 扫描web应用程序漏洞

BurpSuit-Intruder 自动化攻击

---------------------------------------------------------------------------------------------------------
SQL注入
数字型注入：
猜测SQL语句为 select * from table where id = 8
测试步骤
1.http://www.xxser.com/test.php?id=8'--页面出错
2.http://www.xxser.com/test.php?id=8 and 1=1 --正确
3.http://www.xxser.com/test.php?id=8 and 1=2 --页面不出错、无数据
弱类型语言asp\php等会有数字型注入问题;java等强类型不会
字符型注入：
需要单引号进行闭合,并通过--注释多余代码

常见注入：
查询数据；读写文件；执行命令

SQL_SERVER
1.利用错误消息提取信息
1)枚举当前表及列：
 ' having 1=1 --
抛出列表中的列没有包含在聚合函数或者groupby子句的错误，接下来不断枚举所有列
' group by 列1 having 1=1 --
2)利用数据类型错误提取数据
' and 1>(select top 1 username from users)
抛出varchar值转成数据类型int时失败异常
2.获取元数据
3.ORDER BY 子句和UNION查询
得到列数和列信息
4.系统函数
5.危险的存储过程+
例如：id=1;exec xp_cmdshell 'net user test test /add等

MySQL
类似SQL_SERVER,除了某些语法不同

盲注 and sleep(3)

注入工具：
SQLMAP
PANGOLIN

防止SQL注入
1.数据类型判断：java等强类型语言可以完全忽略；弱类型语言需要判断数据类型
2.特殊字符转义：
OWASP ESAPI接口对字符转义
可能引发二次SQL注入。比如插入的数据为 ' union select 1,@@version -- 
再执行一次查询，就可以执行语句
3.使用预编译语句
如java-preparedstatment
4.框架技术
5.存储过程

---------------------------------------------------------------------------------------------------------
上传漏洞
web容器对于上传文件时的漏洞。通常伴随着解析漏洞

解析漏洞
1.IIS解析漏洞：IIS6.0里，在*.asa、*.asp格式文件夹时，里面的文件都会当成asp文件解析
webdav漏洞
2.apache解析漏洞

防止上传漏洞：
客户端：js检测
服务器端检测：
1.白名单验证：允许上传特定的扩展名；
2.MIME验证：
3.目录验证：指定目录，防止创建*.asp目录
修复上传漏洞：
1.目录过滤不严，攻击者可能建立畸形目录；
2.文件未重命名，攻击者可能利用Web容器解析漏洞
步骤：
1.正确目录
2.扩展名和白名单比较
3.重命名文件

---------------------------------------------------------------------------------------------------------
XSS跨站脚本攻击
%%通过闭合标签


通过js代码实现。<script src="http://.."></script>

反射型XSS：用户点击某url后
存储型XSS：提交到服务器端存储，再次访问时读取并攻击
DOM型

检测XSS
手工步骤：
1.输入特殊字符查看html元素变化
2.输入<script><alert('1')></script> 如果不成功 继续3
3.输入闭合" /><script><alert('1')></script>
工具检测：XSSER、XSSF

XSS框架：方便进行XSS测试或者攻击
xsser.me

修复XSS跨站漏洞
OWASP ESAPI对特殊字符进行转义

---------------------------------------------------------------------------------------------------------
命令执行漏洞
系统内提供命令执行的功能，通过命令连接执行符将命令连接。
命令执行模型：1.直接调用操作系统命令；2.执行脚本代码调用操作系统命令
脚本语言如php
JAVA存在Runtime类

防范命令执行漏洞
1.尽量不要使用系统执行命令
2.做好变量过滤，对敏感字符进行转义
3.确保动态函数使用是指定的
4.对PHP来说，危险函数慎用

严格查看所有输入的地方
---------------------------------------------------------------------------------------------------------
文件包含漏洞
文件作为一个变量被引入进程序，然后执行。php较多。

---------------------------------------------------------------------------------------------------------
CSRF
跨站请求伪造攻击：盗取用户session信息，劫持用户会话。
条件：1.浏览器和服务器在会话状态。

检查CSRF漏洞
1.手工：编写执行文件查看
2.半自动：CSRFTester

防范CSRF：
1.二次验证：操作确认提示；输入验证码
2.token：
每当用户登录后会随机生成一段字符串，并且存储在Session中；
敏感操作中加入隐藏标签，value即为Session中保存的字符串；（注：如果为GET请求，考虑使用在Cookie中存储Token）；
提交后，服务器端取出Session中字符串与提交的Token比较；
更新Token值。
（注：存在XSS漏洞时，token防御将失效）

---------------------------------------------------------------------------------------------------------
漏洞信息库：seebug.org
---------------------------------------------------------------------------------------------------------
暴力破解：
C/S架构破解工具：如数据库-Medusa
B/S架构破解工具：Burpsuit
防止暴力破解：
1.密码复杂性（长度、个人信息、字符类型组合）
2.验证码
3.登录日志（限制登录次数）
---------------------------------------------------------------------------------------------------------
旁注攻击
通过攻击同一个服务器的其他网站，得到目标网站的信息。
IP逆向查询：通过IP反查网站
CDN:加速、不暴露真实IP
---------------------------------------------------------------------------------------------------------
提权
（配合旁注攻击）
---------------------------------------------------------------------------------------------------------
ARP欺骗攻击
安装arp防火墙
---------------------------------------------------------------------------------------------------------
社会工程学
