1.烂代码
重复代码；抽取成一个方法或者一个类中
过长函数：需要提炼成各个独立的方法，通常需要注释说明的代码段、条件表达式、循环
过大类：
过长参数列：抽象出一个对象传递
发散式变化：大类拆解，每个类应该只因一种变化需要修改。
霰弹式修改：需要修改的代码集中到一起
发散式变化和霰弹式修改 常常相反，其中利弊视情况把握

基本类型偏执：将基本类型尽量用对象取代
switch语句：大量结构相同的switch语句，用子类继承结构改造或者提到一个公共方法里
冗余类：去掉或者改为内部类
夸夸其谈未来性：不要的就去掉，未来需要再添加
过多的注释：当你感觉需要写注释时，请先尝试重构，试着让所有的注释都变得多余；如果你不知道该做什么，这才是注释的良好运用时机，除了用来记述将来的打算之外，注释还可以用来标记你并无十足把握的区域。


2.重构手法
提炼函数：过长的函数或者需要注释才能让人理解用途的代码时，部分代码需要提炼到一个独立的函数中。做法：创造一个新函数，根据函数意图命名，以“做什么命名”，而不是“怎样做”

引入解释性变量：表达式给变量赋值，用变量说明计算的意义
分解临时变量：不同的表达式结果不要重复给一个变量赋值，要使每个变量只承担一个说明


搬移函数：
搬移字段
提炼类
合并类
扩展类
常量值代替魔法数

封装字段
封装集合


分解条件表达式：每个选择分支的条件表达式独立成函数
合并条件表达式：不同的条件判断后有同一个类型的结果，则可以通过逻辑运算符合并这些条件，然后抽成独立函数

移除控制标记：由控制标记来控制流程的，改成用break或者return
以卫语句取代嵌套条件表达式：一个一个单独的if方式单独返回值
以多态取代条件表达式：
函数改名：
保持函数参数传递完整对象：
以对象取代各个分散的参数值：
移除设值函数：对象在创建时进行设值，此后不再设值。同时变量需要为final类型
将构造函数替换为工厂函数：
封装向下转型：某个函数返回的对象，需要由函数调用者向下转型―>将向下转型的动作移到函数中，返回值是确定的具体对象。

字段、函数上移：两个子类拥有相同的字段，将该字段移至超类；拥有相同效果的函数，将函数上移至超类；
构造函数本体上移：各个子类拥有一些构造函数，它们需要构造的字段有公共部分，则在超类中新建一个构造函数，并在子类构造函数中调用它。
函数、字段下移：

提炼子类：类中的某些特性只被某些实例用到，则新建一个子类，将上面所说的那一部分特性移到子类中。
提炼超类：两个类有相似特性，则为两个类建立一个超类，将相同特性移至超类。

折叠继承体系：子类和超类合并，简化继承体系
塑造模板函数：
组合和继承的灵活使用：

梳理并分解继承体系：建立两个继承体系，并通过委托关系让其中一个可以调用另一个。
将过程化设计转为对象设计：
将领域和表述/显示分离：

