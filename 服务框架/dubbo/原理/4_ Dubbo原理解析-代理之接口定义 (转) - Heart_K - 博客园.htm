<!DOCTYPE HTML>
<!-- saved from url=(0048)http://www.cnblogs.com/heart-king/p/5642736.html -->
<!DOCTYPE html PUBLIC "" ""><HTML lang="zh-cn"><HEAD><META content="IE=10.0000" 
http-equiv="X-UA-Compatible">
 
<META charset="utf-8"> 
<META name="viewport" content="width=device-width, initial-scale=1"> <TITLE>4. 
Dubbo原理解析-代理之接口定义 (转) - Heart_K - 博客园</TITLE> <LINK href="4_%20Dubbo原理解析-代理之接口定义%20(转)%20-%20Heart_K%20-%20博客园_files/blog-common.css" 
rel="stylesheet" type="text/css"> <LINK id="MainCss" href="4_%20Dubbo原理解析-代理之接口定义%20(转)%20-%20Heart_K%20-%20博客园_files/bundle-LessIsMore.css" 
rel="stylesheet" type="text/css"> <LINK id="mobile-style" href="4_%20Dubbo原理解析-代理之接口定义%20(转)%20-%20Heart_K%20-%20博客园_files/bundle-LessIsMore-mobile.css" 
rel="stylesheet" type="text/css" media="only screen and (max-width: 768px)"> 
<LINK title="RSS" href="http://www.cnblogs.com/heart-king/rss" rel="alternate" 
type="application/rss+xml"> <LINK title="RSD" href="http://www.cnblogs.com/heart-king/rsd.xml" 
rel="EditURI" type="application/rsd+xml"> <LINK href="http://www.cnblogs.com/heart-king/wlwmanifest.xml" 
rel="wlwmanifest" type="application/wlwmanifest+xml"> 
<SCRIPT src="4_%20Dubbo原理解析-代理之接口定义%20(转)%20-%20Heart_K%20-%20博客园_files/jquery.js" type="text/javascript"></SCRIPT>
  
<SCRIPT type="text/javascript">var currentBlogApp = 'heart-king', cb_enable_mathjax=false;var isLogined=false;</SCRIPT>
 
<SCRIPT src="4_%20Dubbo原理解析-代理之接口定义%20(转)%20-%20Heart_K%20-%20博客园_files/blog-common.js" type="text/javascript"></SCRIPT>
 
<META name="GENERATOR" content="MSHTML 11.00.9600.17690"></HEAD> 
<BODY><A name="top"></A> 
<DIV id="home">
<DIV id="header">
<DIV id="blogTitle"><!--done--> 
<DIV class="title"><A class="headermaintitle" id="Header1_HeaderTitle" href="http://www.cnblogs.com/heart-king/">Heart_K</A></DIV>
<DIV class="subtitle"></DIV></DIV><!--end: blogTitle 博客的标题和副标题 -->	 
<DIV id="navigator">
<UL id="navList">
  <LI id="nav_sitehome"><A class="menu" id="blog_nav_sitehome" href="http://www.cnblogs.com/">博客园</A></LI>
  <LI id="nav_myhome"><A class="menu" id="blog_nav_myhome" href="http://www.cnblogs.com/heart-king/">首页</A></LI>
  <LI id="nav_newpost"><A class="menu" id="blog_nav_newpost" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" 
  rel="nofollow">新随笔</A></LI>
  <LI id="nav_contact"><A class="menu" id="blog_nav_contact" href="https://msg.cnblogs.com/send/Heart_K" 
  rel="nofollow">联系</A></LI>
  <LI id="nav_rss"><A class="menu" id="blog_nav_rss" href="http://www.cnblogs.com/heart-king/rss">订阅</A> <!--<a id="blog_nav_rss_image" class="aHeaderXML" href="http://www.cnblogs.com/heart-king/rss"><img src="//www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></LI>
  <LI id="nav_admin"><A class="menu" id="blog_nav_admin" href="https://i.cnblogs.com/" 
  rel="nofollow">管理</A></LI></UL>
<DIV class="blogStats">
<DIV id="blog_stats"><!--done--> 随笔-36&nbsp; 文章-0&nbsp; 评论-0&nbsp; </DIV></DIV><!--end: blogStats -->
	 </DIV><!--end: navigator 博客导航栏 --> </DIV><!--end: header 头部 --> 
<DIV id="main">
<DIV id="mainContent">
<DIV class="forFlow">
<DIV id="post_detail"><!--done--> 
<DIV id="topics">
<DIV class="post">
<H1 class="postTitle"><A class="postTitle2" id="cb_post_title_url" href="http://www.cnblogs.com/heart-king/p/5642736.html">4. 
Dubbo原理解析-代理之接口定义 (转)</A>		 </H1>
<DIV class="clear"></DIV>
<DIV class="postBody">
<DIV id="cnblogs_post_body">
<P>转载自 &nbsp;<A 
href="http://blog.csdn.net/quhongwei_zhanqiu">斩秋的专栏</A>&nbsp;&nbsp;http://blog.csdn.net/quhongwei_zhanqiu/article/details/41577159</P>
<P>&nbsp;</P>
<HR>

<P>&nbsp;</P>
<P>&nbsp;</P>
<H2>一：ProxyFactory的接口定义</H2>
<DIV class="cnblogs_code">
<PRE><SPAN style="color: rgb(0, 0, 255);">import</SPAN><SPAN style="color: rgb(0, 0, 0);"> com.alibaba.dubbo.common.Constants;
</SPAN><SPAN style="color: rgb(0, 0, 255);">import</SPAN><SPAN style="color: rgb(0, 0, 0);"> com.alibaba.dubbo.common.URL;
</SPAN><SPAN style="color: rgb(0, 0, 255);">import</SPAN><SPAN style="color: rgb(0, 0, 0);"> com.alibaba.dubbo.common.extension.Adaptive;
</SPAN><SPAN style="color: rgb(0, 0, 255);">import</SPAN><SPAN style="color: rgb(0, 0, 0);"> com.alibaba.dubbo.rpc.Invoker;
</SPAN><SPAN style="color: rgb(0, 0, 255);">import</SPAN><SPAN style="color: rgb(0, 0, 0);"> com.alibaba.dubbo.rpc.RpcException;

</SPAN><SPAN style="color: rgb(0, 128, 0);">/**</SPAN><SPAN style="color: rgb(0, 128, 0);">
 * @ClassName: ProxyFactory 
 * @Description:
 * </SPAN><SPAN style="color: rgb(128, 128, 128);">@author</SPAN><SPAN style="color: rgb(0, 128, 0);"> william.liangf add by rayhong
 * @date 2015-7-5 20:24:58
 </SPAN><SPAN style="color: rgb(0, 128, 0);">*/</SPAN><SPAN style="color: rgb(0, 0, 0);">
@SPI(</SPAN>"javassist"<SPAN style="color: rgb(0, 0, 0);">)
</SPAN><SPAN style="color: rgb(0, 0, 255);">public</SPAN> <SPAN style="color: rgb(0, 0, 255);">interface</SPAN><SPAN style="color: rgb(0, 0, 0);"> ProxyFactory {

    @Adaptive({Constants.PROXY_KEY})
    </SPAN>&lt;T&gt; T getProxy(Invoker&lt;T&gt; invoker) <SPAN style="color: rgb(0, 0, 255);">throws</SPAN><SPAN style="color: rgb(0, 0, 0);"> RpcException;

    @Adaptive({Constants.PROXY_KEY})
    </SPAN>&lt;T&gt; Invoker&lt;T&gt; getInvoker(T proxy, Class&lt;T&gt; type, URL url) <SPAN style="color: rgb(0, 0, 255);">throws</SPAN><SPAN style="color: rgb(0, 0, 0);"> RpcException;
    
}</SPAN></PRE></DIV>
<P>1. @SPI指定默认使用javassist字节码技术来生成代理对象</P>
<P>2. 接口定义了生成代理对象的方法getProxy, 入参是invoker对象</P>
<P>3. 接口定义了获取invoker对象， invoker对象是个可执行对象，这里inovker对象的invoke方法其实执行的是</P>
<P>根据url获取的方法对第一个入参的实体对象的调用，<SPAN 
style="line-height: 1.5;">即：如果url的得知调用方法sayHello,&nbsp; </SPAN></P>
<P><SPAN 
style="line-height: 1.5;">入参proxy为空Test对象实现test，那invoker.invoke()就是test.sayHello()</SPAN></P>
<P><SPAN style="line-height: 1.5;"><IMG alt="" src="4_%20Dubbo原理解析-代理之接口定义%20(转)%20-%20Heart_K%20-%20博客园_files/582873-20160705103640889-830806615.png"></SPAN></P>
<P>AbstractProxyFactory: 代理工厂的公共抽象， 
这里抽象实现主要是获取需要代理的接口，代理接口可以在设置在url中key为interfaces，</P>
<P>如果是多个接口用逗号分隔， 如果没有在url中指定，代理invoker获取的和EchoService接口</P>
<P><IMG alt="" src="4_%20Dubbo原理解析-代理之接口定义%20(转)%20-%20Heart_K%20-%20博客园_files/582873-20160705103713842-1746193993.png"></P>
<P>JdkProxyFactory: 利用jdk动态代理来创建代理，实现来说比较简单</P>
<P>JDK动态代理获取代理对象</P>
<DIV class="cnblogs_code">
<PRE><SPAN style="color: rgb(0, 0, 255);">public</SPAN> &lt;T&gt; T getProxy(Invoker&lt;T&gt; invoker,Class&lt;?&gt;<SPAN style="color: rgb(0, 0, 0);">[] interfaces) {

　　</SPAN><SPAN style="color: rgb(0, 0, 255);">return</SPAN> (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), <BR>　　　　　　　　　　interfaces, <SPAN style="color: rgb(0, 0, 255);">new</SPAN><SPAN style="color: rgb(0, 0, 0);"> InvokerInvocationHandler(invoker));

}</SPAN></PRE></DIV>
<P>InvokerInvocationHandler是jdk动态代理创建一定要构建的参数，这里它的invoke方法只是简单的调用了invoker.invoke方法，</P>
<P>Invoker在dubbo中代表一个可执行体，一切都向它靠拢。</P>
<P>&nbsp;</P>
<P><STRONG>获取invoker对象</STRONG></P>
<DIV class="cnblogs_code">
<PRE>import java.lang.reflect.Method;</PRE>
<PRE>import com.alibaba.dubbo.common.URL;<BR>import com.alibaba.dubbo.rpc.Invoker;<BR><EM id="__mceDel" style="line-height: 1.5;"><EM id="__mceDel"><EM id="__mceDel">import com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker;</EM></EM></EM></PRE>
<PRE><SPAN style="font-size: 15px;"><SPAN style="color: rgb(0, 0, 255);">public</SPAN> &lt;T&gt; Invoker&lt;T&gt; getInvoker(T proxy, Class&lt;T&gt;<SPAN style="color: rgb(0, 0, 0);"> type, URL url) {

        </SPAN><SPAN style="color: rgb(0, 0, 255);">return</SPAN> <SPAN style="color: rgb(0, 0, 255);">new</SPAN> AbstractProxyInvoker&lt;T&gt;<SPAN style="color: rgb(0, 0, 0);">(proxy, type, url) {

            @Override
            </SPAN><SPAN style="color: rgb(0, 0, 255);">protected</SPAN><SPAN style="color: rgb(0, 0, 0);"> Object doInvoke(T proxy, String methodName,
            Class</SPAN>&lt;?&gt;[] parameterTypes, Object[] arguments) <SPAN style="color: rgb(0, 0, 255);">throws</SPAN><SPAN style="color: rgb(0, 0, 0);"> Throwable {

                Method method </SPAN>=<SPAN style="color: rgb(0, 0, 0);"> proxy.getClass().getMethod(methodName, parameterTypes);
                </SPAN><SPAN style="color: rgb(0, 0, 255);">return</SPAN><SPAN style="color: rgb(0, 0, 0);"> method.invoke(proxy, arguments);

            }
        };
    }</SPAN></SPAN></PRE></DIV>
<P>这里创建的 Invoker对象，执行invoke方法，其实就是利用反射利用入参执行对应对象的对应方法。</P>
<P>&nbsp;</P></DIV>
<DIV id="MySignature"></DIV>
<DIV class="clear"></DIV>
<DIV id="blog_post_info_block">
<DIV id="BlogPostCategory"></DIV>
<DIV id="EntryTag"></DIV>
<DIV id="blog_post_info"></DIV>
<DIV class="clear"></DIV>
<DIV id="post_next_prev"></DIV></DIV></DIV>
<DIV class="postDesc">posted @ <SPAN id="post-date">2016-07-05 10:44</SPAN> <A 
href="http://www.cnblogs.com/heart-king/">Heart_K</A> 阅读(<SPAN id="post_view_count">...</SPAN>) 
评论(<SPAN id="post_comment_count">...</SPAN>)  <A href="https://i.cnblogs.com/EditPosts.aspx?postid=5642736" 
rel="nofollow">编辑</A> <A onclick="AddToWz(5642736);return false;" href="http://www.cnblogs.com/heart-king/p/5642736.html#">收藏</A></DIV></DIV>
<SCRIPT type="text/javascript">var allowComments=true,cb_blogId=192111,cb_entryId=5642736,cb_blogApp=currentBlogApp,cb_blogUserGuid='74411703-834e-e311-8d02-90b11c0b17d6',cb_entryCreatedDate='2016/7/5 10:44:00';loadViewCount(cb_entryId);</SCRIPT>
	 </DIV><!--end: topics 文章、评论容器--> </DIV><A name="!comments"></A>
<DIV id="blog-comments-placeholder"></DIV>
<SCRIPT type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</SCRIPT>
 
<DIV class="commentform" id="comment_form"><A name="commentform"></A> 
<DIV id="divCommentShow"></DIV>
<DIV id="comment_nav"><SPAN id="span_refresh_tips"></SPAN><A id="lnk_RefreshComments" 
onclick="return RefreshCommentList();" href="javascript:void(0);" clientidmode="Static" 
runat="server">刷新评论</A><A onclick="return RefreshPage();" href="http://www.cnblogs.com/heart-king/p/5642736.html#">刷新页面</A><A 
href="http://www.cnblogs.com/heart-king/p/5642736.html#top">返回顶部</A></DIV>
<DIV id="comment_form_container"></DIV>
<DIV class="ad_text_commentbox" id="ad_text_under_commentbox"></DIV>
<DIV id="ad_t2"></DIV>
<DIV id="opt_under_post"></DIV>
<DIV class="c_ad_block" id="ad_c1"></DIV>
<DIV id="under_post_news"></DIV>
<DIV class="c_ad_block" id="ad_c2"></DIV>
<DIV id="under_post_kb"></DIV>
<DIV class="c_ad_block" id="HistoryToday"></DIV>
<SCRIPT type="text/javascript">
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverAdT2();
    deliverAdC1();
    deliverAdC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);   
</SCRIPT>
 </DIV></DIV><!--end: forFlow -->	 </DIV><!--end: mainContent 主体内容容器-->	 
<DIV id="sideBar">
<DIV id="sideBarMain"><!--done--> 
<DIV class="newsItem">
<H3 class="catListTitle">公告</H3>
<DIV id="blog-news"></DIV>
<SCRIPT type="text/javascript">loadBlogNews();</SCRIPT>
 </DIV>
<DIV id="calendar">
<DIV id="blog-calendar" style="display: none;"></DIV>
<SCRIPT type="text/javascript">loadBlogDefaultCalendar();</SCRIPT>
</DIV>
<DIV id="leftcontentcontainer">
<DIV id="blog-sidecolumn"></DIV>
<SCRIPT type="text/javascript">loadBlogSideColumn();</SCRIPT>
			 </DIV></DIV><!--end: sideBarMain -->	 </DIV><!--end: sideBar 侧边栏容器 -->	 
<DIV class="clear"></DIV></DIV><!--end: main -->	 
<DIV class="clear"></DIV>
<DIV id="footer"><!--done--> Copyright ©2017 Heart_K	 </DIV><!--end: footer --> 
</DIV><!--end: home 自定义的最大容器 --> </BODY></HTML>
